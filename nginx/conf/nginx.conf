# Domain Rotation Nginx Configuration
worker_processes auto;
error_log /home/runner/workspace/nginx/logs/error.log warn;
pid /home/runner/workspace/nginx/logs/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include       /nix/store/8zcmz5vcaxav7cd2m33hs4bbid5y8i3b-nginx-1.28.0/conf/mime.types;
    default_type  application/octet-stream;

    access_log /home/runner/workspace/nginx/logs/access.log;

    # Basic settings
    sendfile on;
    keepalive_timeout 65;

    # Domain rotation logic - this must be at http level
    split_clients "${time_local}${request_id}" $target_domain {
        20%     "newdomain1.com";
        20%     "newdomain2.com"; 
        20%     "newdomain3.com";
        20%     "newdomain4.com";
        *       "newdomain5.com";
    }

    # Your backend application (Express server on port 5000)
    upstream backend_app {
        server 127.0.0.1:5000;
    }

    # Main domain - handles both routing and direct content
    server {
        listen 8080;
        server_name www.maindomain.com maindomain.com;

        # Health check endpoint
        location /nginx-health {
            access_log off;
            return 200 "nginx healthy\n";
            add_header Content-Type text/plain;
        }

        # ONLY rotate when random 6-character string is used
        location ~ "^/([a-zA-Z0-9]{6})$" {
            # Redirect to chosen external domain
            return 302 https://$target_domain;
        }

        # ALL other requests serve content directly from main domain
        location / {
            proxy_pass http://backend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }

    # External domains - all serve same content as main domain
    server {
        listen 8080;
        server_name newdomain1.com newdomain2.com newdomain3.com newdomain4.com newdomain5.com;
        
        location / {
            proxy_pass http://backend_app;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}